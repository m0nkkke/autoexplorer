import 'dart:async';
import 'dart:convert';
import 'dart:io';
import 'package:autoexplorer/repositories/storage/abstract_storage_repository.dart';
import 'package:autoexplorer/repositories/storage/models/file_json.dart';
import 'package:autoexplorer/repositories/storage/storage_repository.dart';
import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:flutter/foundation.dart';
import 'package:get_it/get_it.dart';
import 'package:internet_connection_checker/internet_connection_checker.dart';
import 'package:path_provider/path_provider.dart';
import 'package:path/path.dart' as p;

class ConnectivityService extends ChangeNotifier {
  final Connectivity _connectivity = Connectivity();
  late final StreamSubscription<List<ConnectivityResult>> _subscription;

  bool _hasInternet = false;
  bool _internetEventSent = false;
  bool get hasInternet => _hasInternet;

  // –°—Ç—Ä–∏–º –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
  final _internetAvailableController = StreamController<bool>.broadcast();
  Stream<bool> get internetAvailableStream =>
      _internetAvailableController.stream;

  ConnectivityService() {
    _subscription =
        _connectivity.onConnectivityChanged.listen(_updateConnection);
    _connectivity.checkConnectivity().then(_updateConnection);
  }

  /// –ì–ª–∞–≤–Ω—ã–π –∞–ø–¥–µ–π—Ç –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–∏
  Future<void> _updateConnection(List<ConnectivityResult> results) async {
    final wasOnline = _hasInternet;

    if (results.contains(ConnectivityResult.none)) {
      _hasInternet = false;
    } else {
      _hasInternet = await InternetConnectionChecker().hasConnection;
    }

    // –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if (wasOnline != _hasInternet) {
      notifyListeners();
      _internetEventSent = false;
      // –ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –ø–æ—è–≤–∏–ª—Å—è, —É–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —ç—Ç–æ–º
      if (!wasOnline && _hasInternet) {
        if (!_internetEventSent) {
          _internetEventSent = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Å—Ä–∞–∑—É

          // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
          Future.delayed(const Duration(milliseconds: 500), () {
            _internetAvailableController.add(true);
            debugPrint(
                'üöÄ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω"'); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
          });
        }
      }
    }
  }

  @override
  void dispose() {
    _subscription.cancel();
    _internetEventSent = false;
    _internetAvailableController.close();
    super.dispose();
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç handle –Ω–∞ createLog.json –≤ –±–∞–∑–æ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  Future<File> _getLogFile() async {
    final baseDir = await getApplicationDocumentsDirectory();
    final logFile = File(p.join(baseDir.path, 'createLog.json'));
    if (!await logFile.exists()) {
      await logFile.create(recursive: true);
      await logFile.writeAsString('[]', flush: true);
    }
    return logFile;
  }

  /// –ü—Ä–æ–±–µ–≥–∞–µ–º –ø–æ –≤—Å–µ–º –∑–∞–ø–∏—Å—è–º –∏–∑ JSON-–ª–æ–≥–∞,
  /// –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ –∏ —É–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–≥–∞ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ.
  /// –ü—Ä–æ–±–µ–≥–∞–µ–º –ø–æ –≤—Å–µ–º –∑–∞–ø–∏—Å—è–º –∏–∑ JSON-–ª–æ–≥–∞,
  /// –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ isSynced –ø—Ä–∏ —É—Å–ø–µ—Ö–µ.
  Future<void> _syncLog() async {
    final logFile = await _getLogFile();
    final content = await logFile.readAsString();
    final List<dynamic> array = jsonDecode(content);

    if (array.isEmpty) return;

    final localRepo =
        GetIt.I<AbstractStorageRepository>(instanceName: 'local_repository');
    final yandexRepo =
        GetIt.I<AbstractStorageRepository>(instanceName: 'yandex_repository')
            as StorageRepository;

    // final appDir = await localRepo.getAppDirectory(path: '/'); // –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –Ω—É–∂–Ω–∞ –∑–¥–µ—Å—å

    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –∏—Ç–µ—Ä–∞—Ü–∏–∏
    final List<dynamic> itemsToSync = List.from(array);

    for (int i = 0; i < itemsToSync.length; i++) {
      final raw = itemsToSync[i];
      final entry = FileJSON.fromJson(raw as Map<String, dynamic>);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å
      if (entry.isSynced) {
        continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
      }

      try {
        if (entry.type == 'file') {
          await yandexRepo.uploadFile(
            filePath: entry.uploadPath,
            uploadPath: entry.remotePath,
          );
        } else {
          await yandexRepo.createFolder(
            name: entry.uploadPath,
            path: entry.remotePath,
          );
        }

        // –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å—å ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ isSynced –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –º–∞—Å—Å–∏–≤–µ
        final originalEntryIndex = array.indexWhere((item) =>
            item['uploadPath'] == entry.uploadPath &&
            item['remotePath'] == entry.remotePath &&
            item['type'] == entry.type);

        if (originalEntryIndex != -1) {
          array[originalEntryIndex]['isSynced'] = true;
          debugPrint(
              '‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${entry.uploadPath}'); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        }
      } catch (e) {
        // –Ω–∞ –Ω–µ—É–¥–∞—á—É –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º, –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Å isSynced = false
        debugPrint(
            '‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ ${entry.uploadPath}: $e'); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
      }
    }

    // –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ª–æ–≥ —Å–æ –≤—Å–µ–º–∏ –∑–∞–ø–∏—Å—è–º–∏ (–≤–∫–ª—é—á–∞—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ)
    await logFile.writeAsString(jsonEncode(array), flush: true);

    // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —É–¥–∞–ª–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –ª–æ–≥–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    // –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–∞
  }

  /// –ú–µ—Ç–æ–¥ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  Future<void> synchronizeFiles() async {
    if (_hasInternet) {
      await _syncLog();
    } else {
      debugPrint(
          '–ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.'); // –ò–ª–∏ –¥—Ä—É–≥–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    }
  }
}
