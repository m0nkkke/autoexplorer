import 'dart:async';
import 'dart:developer';
import 'package:autoexplorer/repositories/storage/abstract_storage_repository.dart';
import 'package:autoexplorer/repositories/storage/local_repository.dart';
import 'package:autoexplorer/repositories/storage/storage_repository.dart';
// import 'package:autoexplorer/repositories/storage/storage_repository.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:path/path.dart' as p;
import 'package:get_it/get_it.dart';
part 'storage_list_event.dart';
part 'storage_list_state.dart';

class StorageListBloc extends Bloc<StorageListEvent, StorageListState> {
  StorageListBloc() : super(StorageListInitial()) {
    on<StorageListLoad>(_onStorageListLoad);
    on<StorageListCreateFolder>(_onStorageListCreateFolder);
    on<StorageListUploadFile>(_onStorageListUploadFile);
    on<LoadImageUrl>(_onLoadImageUrl);
    on<ResetImageLoadingState>(_onResetImageLoadingState);
    on<SyncFromYandexEvent>(_onSyncFromYandex);
    on<SyncToYandexEvent>(_onSyncToYandex);
    on<DeleteFolderEvent>(_onDeleteFolder);
    on<SyncAllEvent>(_onSyncAll);
  }

  FutureOr<void> _onResetImageLoadingState(
      ResetImageLoadingState event, Emitter<StorageListState> emit) async {
    try {
      emit(StorageListLoaded(items: event.currentItems));
    } catch (e) {
      print(e.toString());
      emit(StorageListLoadingFailure(exception: e));
    }
  }

  FutureOr<void> _onLoadImageUrl(
      LoadImageUrl event, Emitter<StorageListState> emit) async {
    try {
      // –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ —É–∂–µ –µ—Å—Ç—å (–Ω–µ "-"), –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
      if (event.imageUrl != '-') {
        emit(ImageUrlLoaded(event.imageUrl));
        return;
      }

      // –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ—ë
      final url = await localRepository.getImageDownloadUrl(event.path);
      emit(ImageUrlLoaded(url));
    } catch (e) {
      emit(ImageLoadError());
    }
  }

  // FutureOr<void> _onStorageListUploadFile(
  //     StorageListUploadFile event, Emitter<StorageListState> emit) async {
  //   try {
  //     emit(StorageListLoading());
  //     await localRepository.uploadFile(
  //       filePath: event.filePath,
  //       uploadPath: event.uploadPath,
  //     );
  //     add(StorageListLoad(path: event.currentPath));
  //   } catch (e) {
  //     print(e.toString());
  //     emit(StorageListLoadingFailure(exception: e));
  //   }
  // }

  FutureOr<void> _onStorageListUploadFile(
    StorageListUploadFile event,
    Emitter<StorageListState> emit,
  ) async {
    try {
      emit(StorageListLoading());

      // 1) –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      await localRepository.uploadFile(
        filePath: event.filePath,
        uploadPath: event.uploadPath, // —ç—Ç–æ –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ applicationData
      );

      // 2) –°—Ç—Ä–æ–∏–º —É–¥–∞–ª—ë–Ω–Ω—ã–π –ø—É—Ç—å, –≤—ã—Ä–µ–∑–∞—è –≤—Å—ë –¥–æ applicationData
      final appDir = await localRepository.getAppDirectory(path: '/');
      // –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ applicationData
      final absLocal = p.join(appDir.path, event.uploadPath);
      // –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –æ—Ç applicationData
      final rel = p.relative(absLocal, from: appDir.path);
      // —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è API ‚Äî —Å –≤–µ–¥—É—â–∏–º —Å–ª—ç—à–µ–º
      final remotePath = '/$rel';

      // 3) –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
      try {
        await yandexRepository.uploadFile(
          filePath: event.filePath,
          uploadPath: remotePath,
        );
        print('‚¨ÜÔ∏è –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫: $remotePath');
      } catch (e) {
        print('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ –Ø.–î–∏—Å–∫: $e');
      }

      // 4) –û–±–Ω–æ–≤–ª—è–µ–º UI
      add(StorageListLoad(path: event.currentPath));
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –≤ _onStorageListUploadFile: $e');
      emit(StorageListLoadingFailure(exception: e));
    }
  }

  // FutureOr<void> _onStorageListCreateFolder(
  //     StorageListCreateFolder event, Emitter<StorageListState> emit) async {
  //   try {
  //     emit(StorageListLoading());
  //     print('creating folder ${event.path}');
  //     print('üìÅ Creating folder: ${event.name}');
  //     print('üìÇ Inside path: ${event.path}');
  //     await localRepository.createFolder(name: event.name, path: event.path);
  //     add(StorageListLoad(path: event.path));
  //   } catch (e) {
  //     print(e.toString());
  //     emit(StorageListLoadingFailure(exception: e));
  //   }
  // }
  FutureOr<void> _onStorageListCreateFolder(
    StorageListCreateFolder event,
    Emitter<StorageListState> emit,
  ) async {
    try {
      emit(StorageListLoading());

      // 1) —Å–æ–∑–¥–∞—ë–º –ª–æ–∫–∞–ª—å–Ω–æ (event.path ‚Äî –ø–æ–ª–Ω—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ)
      await localRepository.createFolder(
        name: event.name,
        path: event.path,
      );

      // 2) –≤—ã—á–∏—Å–ª—è–µ–º ¬´—É–¥–∞–ª—ë–Ω–Ω—ã–π¬ª –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ applicationData
      //    –Ω–∞–π–¥—ë–º –≤ event.path —Å–µ–≥–º–µ–Ω—Ç 'applicationData'
      const marker = 'applicationData';
      final idx = event.path.indexOf(marker);
      String remoteParent;
      if (idx >= 0) {
        // –±–µ—Ä—ë–º –≤—Å—ë, —á—Ç–æ –ø–æ—Å–ª–µ 'applicationData'
        remoteParent = event.path.substring(idx + marker.length);
        // –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –≤–µ–¥—É—â–∏–π —Å–ª—ç—à
        if (!remoteParent.startsWith('/')) remoteParent = '/$remoteParent';
      } else {
        remoteParent = '/';
      }

      // 3) —Å–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ –ø–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–º—É –ø—É—Ç–∏
      await yandexRepository.createFolder(
        name: event.name,
        path: remoteParent, // –≤–æ—Ç –∑–¥–µ—Å—å —É–∂–µ /Test999 –∏–ª–∏ /
      );
      print('‚úÖ –ü–∞–ø–∫–∞ ${event.name} —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ –≤ $remoteParent');

      // 4) –æ–±–Ω–æ–≤–ª—è–µ–º UI
      add(StorageListLoad(path: event.path));
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –≤ _onStorageListCreateFolder: $e');
      emit(StorageListLoadingFailure(exception: e));
    }
  }

  FutureOr<void> _onStorageListLoad(
      StorageListLoad event, Emitter<StorageListState> emit) async {
    try {
      final itemsList =
          await localRepository.getFileAndFolderModels(path: event.path);
      print(itemsList.toString());
      emit(StorageListLoaded(items: itemsList));
    } catch (e) {
      print(e.toString());
      emit(StorageListLoadingFailure(exception: e));
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –Ø–Ω–¥–µ–∫—Å –î–∏—Å–∫–æ–º
  FutureOr<void> _onSyncFromYandex(
      SyncFromYandexEvent event, Emitter<StorageListState> emit) async {
    try {
      emit(StorageListLoading());
      await yandexRepository.syncFromYandexDisk(); // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
      // add(StorageListLoad(
      //     path: event.path)); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    } catch (e) {
      print('==========onSyncFromYandex=========');
      print(e);
      emit(StorageListLoadingFailure(exception: e));
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
  FutureOr<void> _onSyncToYandex(
      SyncToYandexEvent event, Emitter<StorageListState> emit) async {
    try {
      emit(StorageListLoading());
      await yandexRepository
          .syncToYandexDisk(); // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
      add(StorageListLoad(
          path: event.path)); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    } catch (e) {
      print('=========onSyncToYandex==========');
      print(e);
      emit(StorageListLoadingFailure(exception: e));
    }
  }

  FutureOr<void> _onSyncAll(
    SyncAllEvent event,
    Emitter<StorageListState> emit,
  ) async {
    try {
      emit(StorageListLoading());
      // –µ–¥–∏–Ω—ã–π –≤—ã–∑–æ–≤
      await yandexRepository.syncAll(path: event.path);
      // –æ–±–Ω–æ–≤–ª—è–µ–º UI
      add(StorageListLoad(path: event.path));
    } catch (e) {
      print('=========onSyncAll==========');
      print(e);
      emit(StorageListLoadingFailure(exception: e));
    }
  }

  FutureOr<void> _onDeleteFolder(
      DeleteFolderEvent event, Emitter<StorageListState> emit) async {
    try {
      emit(StorageListLoading());
      await localRepository.deleteFolder(
        name: event.folderName,
        path: event.currentPath,
      );
      add(StorageListLoad(path: event.currentPath));
    } catch (e) {
      emit(StorageListLoadingFailure(exception: e));
    }
  }

  final LocalRepository localRepository =
      GetIt.I<AbstractStorageRepository>(instanceName: 'local_repository')
          as LocalRepository;
  final StorageRepository yandexRepository =
      GetIt.I<AbstractStorageRepository>(instanceName: 'yandex_repository')
          as StorageRepository;
}
